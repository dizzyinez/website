import {
  Fragment,
  computed,
  createElementBlock,
  createRenderer,
  customRef,
  defineComponent,
  getCurrentInstance,
  getCurrentScope,
  h,
  inject,
  isRef,
  nextTick,
  normalizeClass,
  normalizeStyle,
  onMounted,
  onScopeDispose,
  onUnmounted,
  openBlock,
  provide,
  reactive,
  readonly,
  ref,
  renderSlot,
  shallowRef,
  toRefs,
  unref,
  useSlots,
  watch,
  watchEffect,
  withAsyncContext
} from "./chunk-TF6X5W6F.js";
import {
  ACESFilmicToneMapping,
  ArrowHelper,
  BackSide,
  BufferAttribute,
  BufferGeometry,
  Camera,
  Clock,
  Color,
  DirectionalLightHelper,
  DoubleSide,
  Float32BufferAttribute,
  HemisphereLightHelper,
  Line,
  LineBasicMaterial,
  MathUtils,
  Mesh,
  MeshBasicMaterial,
  NoToneMapping,
  Object3D,
  PCFSoftShadowMap,
  PerspectiveCamera,
  PointLightHelper,
  REVISION,
  Raycaster,
  SRGBColorSpace,
  Scene,
  SpotLightHelper,
  TextureLoader,
  Vector2,
  Vector3,
  WebGLRenderer,
  three_module_exports
} from "./chunk-27BCFF7U.js";
import "./chunk-PZ5AY32C.js";

// node_modules/@vueuse/shared/index.mjs
function tryOnScopeDispose(fn) {
  if (getCurrentScope()) {
    onScopeDispose(fn);
    return true;
  }
  return false;
}
function createEventHook() {
  const fns = /* @__PURE__ */ new Set();
  const off = (fn) => {
    fns.delete(fn);
  };
  const on = (fn) => {
    fns.add(fn);
    const offFn = () => off(fn);
    tryOnScopeDispose(offFn);
    return {
      off: offFn
    };
  };
  const trigger = (...args) => {
    return Promise.all(Array.from(fns).map((fn) => fn(...args)));
  };
  return {
    on,
    off,
    trigger
  };
}
function toValue(r) {
  return typeof r === "function" ? r() : unref(r);
}
var isClient = typeof window !== "undefined" && typeof document !== "undefined";
var isWorker = typeof WorkerGlobalScope !== "undefined" && globalThis instanceof WorkerGlobalScope;
var notNullish = (val) => val != null;
var toString = Object.prototype.toString;
var isObject = (val) => toString.call(val) === "[object Object]";
var noop = () => {
};
var isIOS = getIsIOS();
function getIsIOS() {
  var _a, _b;
  return isClient && ((_a = window == null ? void 0 : window.navigator) == null ? void 0 : _a.userAgent) && (/iP(?:ad|hone|od)/.test(window.navigator.userAgent) || ((_b = window == null ? void 0 : window.navigator) == null ? void 0 : _b.maxTouchPoints) > 2 && /iPad|Macintosh/.test(window == null ? void 0 : window.navigator.userAgent));
}
function createFilterWrapper(filter, fn) {
  function wrapper(...args) {
    return new Promise((resolve, reject) => {
      Promise.resolve(filter(() => fn.apply(this, args), { fn, thisArg: this, args })).then(resolve).catch(reject);
    });
  }
  return wrapper;
}
function debounceFilter(ms, options = {}) {
  let timer;
  let maxTimer;
  let lastRejector = noop;
  const _clearTimeout = (timer2) => {
    clearTimeout(timer2);
    lastRejector();
    lastRejector = noop;
  };
  const filter = (invoke) => {
    const duration = toValue(ms);
    const maxDuration = toValue(options.maxWait);
    if (timer)
      _clearTimeout(timer);
    if (duration <= 0 || maxDuration !== void 0 && maxDuration <= 0) {
      if (maxTimer) {
        _clearTimeout(maxTimer);
        maxTimer = null;
      }
      return Promise.resolve(invoke());
    }
    return new Promise((resolve, reject) => {
      lastRejector = options.rejectOnCancel ? reject : resolve;
      if (maxDuration && !maxTimer) {
        maxTimer = setTimeout(() => {
          if (timer)
            _clearTimeout(timer);
          maxTimer = null;
          resolve(invoke());
        }, maxDuration);
      }
      timer = setTimeout(() => {
        if (maxTimer)
          _clearTimeout(maxTimer);
        maxTimer = null;
        resolve(invoke());
      }, duration);
    });
  };
  return filter;
}
function cacheStringFunction(fn) {
  const cache = /* @__PURE__ */ Object.create(null);
  return (str) => {
    const hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, "-$1").toLowerCase());
var camelizeRE = /-(\w)/g;
var camelize = cacheStringFunction((str) => {
  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
});
function identity(arg) {
  return arg;
}
function objectPick(obj, keys2, omitUndefined = false) {
  return keys2.reduce((n, k) => {
    if (k in obj) {
      if (!omitUndefined || obj[k] !== void 0)
        n[k] = obj[k];
    }
    return n;
  }, {});
}
function getLifeCycleTarget(target) {
  return target || getCurrentInstance();
}
function useDebounceFn(fn, ms = 200, options = {}) {
  return createFilterWrapper(
    debounceFilter(ms, options),
    fn
  );
}
function refDebounced(value, ms = 200, options = {}) {
  const debounced = ref(value.value);
  const updater = useDebounceFn(() => {
    debounced.value = value.value;
  }, ms, options);
  watch(value, () => updater());
  return debounced;
}
function toRefs2(objectRef, options = {}) {
  if (!isRef(objectRef))
    return toRefs(objectRef);
  const result = Array.isArray(objectRef.value) ? Array.from({ length: objectRef.value.length }) : {};
  for (const key in objectRef.value) {
    result[key] = customRef(() => ({
      get() {
        return objectRef.value[key];
      },
      set(v) {
        var _a;
        const replaceRef = (_a = toValue(options.replaceRef)) != null ? _a : true;
        if (replaceRef) {
          if (Array.isArray(objectRef.value)) {
            const copy = [...objectRef.value];
            copy[key] = v;
            objectRef.value = copy;
          } else {
            const newObject = { ...objectRef.value, [key]: v };
            Object.setPrototypeOf(newObject, Object.getPrototypeOf(objectRef.value));
            objectRef.value = newObject;
          }
        } else {
          objectRef.value[key] = v;
        }
      }
    }));
  }
  return result;
}
function tryOnMounted(fn, sync = true, target) {
  const instance = getLifeCycleTarget();
  if (instance)
    onMounted(fn, target);
  else if (sync)
    fn();
  else
    nextTick(fn);
}
function useIntervalFn(cb, interval = 1e3, options = {}) {
  const {
    immediate = true,
    immediateCallback = false
  } = options;
  let timer = null;
  const isActive = ref(false);
  function clean() {
    if (timer) {
      clearInterval(timer);
      timer = null;
    }
  }
  function pause() {
    isActive.value = false;
    clean();
  }
  function resume() {
    const intervalValue = toValue(interval);
    if (intervalValue <= 0)
      return;
    isActive.value = true;
    if (immediateCallback)
      cb();
    clean();
    if (isActive.value)
      timer = setInterval(cb, intervalValue);
  }
  if (immediate && isClient)
    resume();
  if (isRef(interval) || typeof interval === "function") {
    const stopWatch = watch(interval, () => {
      if (isActive.value && isClient)
        resume();
    });
    tryOnScopeDispose(stopWatch);
  }
  tryOnScopeDispose(pause);
  return {
    isActive,
    pause,
    resume
  };
}

// node_modules/@vueuse/core/node_modules/vue-demi/lib/index.mjs
var isVue22 = false;

// node_modules/@vueuse/core/index.mjs
var defaultWindow = isClient ? window : void 0;
var defaultDocument = isClient ? window.document : void 0;
var defaultNavigator = isClient ? window.navigator : void 0;
var defaultLocation = isClient ? window.location : void 0;
function unrefElement(elRef) {
  var _a;
  const plain = toValue(elRef);
  return (_a = plain == null ? void 0 : plain.$el) != null ? _a : plain;
}
function useEventListener(...args) {
  let target;
  let events;
  let listeners;
  let options;
  if (typeof args[0] === "string" || Array.isArray(args[0])) {
    [events, listeners, options] = args;
    target = defaultWindow;
  } else {
    [target, events, listeners, options] = args;
  }
  if (!target)
    return noop;
  if (!Array.isArray(events))
    events = [events];
  if (!Array.isArray(listeners))
    listeners = [listeners];
  const cleanups = [];
  const cleanup = () => {
    cleanups.forEach((fn) => fn());
    cleanups.length = 0;
  };
  const register = (el, event, listener, options2) => {
    el.addEventListener(event, listener, options2);
    return () => el.removeEventListener(event, listener, options2);
  };
  const stopWatch = watch(
    () => [unrefElement(target), toValue(options)],
    ([el, options2]) => {
      cleanup();
      if (!el)
        return;
      const optionsClone = isObject(options2) ? { ...options2 } : options2;
      cleanups.push(
        ...events.flatMap((event) => {
          return listeners.map((listener) => register(el, event, listener, optionsClone));
        })
      );
    },
    { immediate: true, flush: "post" }
  );
  const stop = () => {
    stopWatch();
    cleanup();
  };
  tryOnScopeDispose(stop);
  return stop;
}
function useMounted() {
  const isMounted = ref(false);
  const instance = getCurrentInstance();
  if (instance) {
    onMounted(() => {
      isMounted.value = true;
    }, isVue22 ? void 0 : instance);
  }
  return isMounted;
}
function useSupported(callback) {
  const isMounted = useMounted();
  return computed(() => {
    isMounted.value;
    return Boolean(callback());
  });
}
function useMutationObserver(target, callback, options = {}) {
  const { window: window2 = defaultWindow, ...mutationOptions } = options;
  let observer;
  const isSupported = useSupported(() => window2 && "MutationObserver" in window2);
  const cleanup = () => {
    if (observer) {
      observer.disconnect();
      observer = void 0;
    }
  };
  const targets = computed(() => {
    const value = toValue(target);
    const items = (Array.isArray(value) ? value : [value]).map(unrefElement).filter(notNullish);
    return new Set(items);
  });
  const stopWatch = watch(
    () => targets.value,
    (targets2) => {
      cleanup();
      if (isSupported.value && targets2.size) {
        observer = new MutationObserver(callback);
        targets2.forEach((el) => observer.observe(el, mutationOptions));
      }
    },
    { immediate: true, flush: "post" }
  );
  const takeRecords = () => {
    return observer == null ? void 0 : observer.takeRecords();
  };
  const stop = () => {
    stopWatch();
    cleanup();
  };
  tryOnScopeDispose(stop);
  return {
    isSupported,
    stop,
    takeRecords
  };
}
function useRafFn(fn, options = {}) {
  const {
    immediate = true,
    fpsLimit = void 0,
    window: window2 = defaultWindow
  } = options;
  const isActive = ref(false);
  const intervalLimit = fpsLimit ? 1e3 / fpsLimit : null;
  let previousFrameTimestamp = 0;
  let rafId = null;
  function loop(timestamp2) {
    if (!isActive.value || !window2)
      return;
    if (!previousFrameTimestamp)
      previousFrameTimestamp = timestamp2;
    const delta = timestamp2 - previousFrameTimestamp;
    if (intervalLimit && delta < intervalLimit) {
      rafId = window2.requestAnimationFrame(loop);
      return;
    }
    previousFrameTimestamp = timestamp2;
    fn({ delta, timestamp: timestamp2 });
    rafId = window2.requestAnimationFrame(loop);
  }
  function resume() {
    if (!isActive.value && window2) {
      isActive.value = true;
      previousFrameTimestamp = 0;
      rafId = window2.requestAnimationFrame(loop);
    }
  }
  function pause() {
    isActive.value = false;
    if (rafId != null && window2) {
      window2.cancelAnimationFrame(rafId);
      rafId = null;
    }
  }
  if (immediate)
    resume();
  tryOnScopeDispose(pause);
  return {
    isActive: readonly(isActive),
    pause,
    resume
  };
}
function useMediaQuery(query, options = {}) {
  const { window: window2 = defaultWindow } = options;
  const isSupported = useSupported(() => window2 && "matchMedia" in window2 && typeof window2.matchMedia === "function");
  let mediaQuery;
  const matches = ref(false);
  const handler = (event) => {
    matches.value = event.matches;
  };
  const cleanup = () => {
    if (!mediaQuery)
      return;
    if ("removeEventListener" in mediaQuery)
      mediaQuery.removeEventListener("change", handler);
    else
      mediaQuery.removeListener(handler);
  };
  const stopWatch = watchEffect(() => {
    if (!isSupported.value)
      return;
    cleanup();
    mediaQuery = window2.matchMedia(toValue(query));
    if ("addEventListener" in mediaQuery)
      mediaQuery.addEventListener("change", handler);
    else
      mediaQuery.addListener(handler);
    matches.value = mediaQuery.matches;
  });
  tryOnScopeDispose(() => {
    stopWatch();
    cleanup();
    mediaQuery = void 0;
  });
  return matches;
}
var _global = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var globalKey = "__vueuse_ssr_handlers__";
var handlers = getHandlers();
function getHandlers() {
  if (!(globalKey in _global))
    _global[globalKey] = _global[globalKey] || {};
  return _global[globalKey];
}
function useDevicePixelRatio(options = {}) {
  const {
    window: window2 = defaultWindow
  } = options;
  const pixelRatio = ref(1);
  if (window2) {
    let observe2 = function() {
      pixelRatio.value = window2.devicePixelRatio;
      cleanup2();
      media = window2.matchMedia(`(resolution: ${pixelRatio.value}dppx)`);
      media.addEventListener("change", observe2, { once: true });
    }, cleanup2 = function() {
      media == null ? void 0 : media.removeEventListener("change", observe2);
    };
    let media;
    observe2();
    tryOnScopeDispose(cleanup2);
  }
  return { pixelRatio };
}
function useResizeObserver(target, callback, options = {}) {
  const { window: window2 = defaultWindow, ...observerOptions } = options;
  let observer;
  const isSupported = useSupported(() => window2 && "ResizeObserver" in window2);
  const cleanup = () => {
    if (observer) {
      observer.disconnect();
      observer = void 0;
    }
  };
  const targets = computed(() => {
    const _targets = toValue(target);
    return Array.isArray(_targets) ? _targets.map((el) => unrefElement(el)) : [unrefElement(_targets)];
  });
  const stopWatch = watch(
    targets,
    (els) => {
      cleanup();
      if (isSupported.value && window2) {
        observer = new ResizeObserver(callback);
        for (const _el of els) {
          if (_el)
            observer.observe(_el, observerOptions);
        }
      }
    },
    { immediate: true, flush: "post" }
  );
  const stop = () => {
    cleanup();
    stopWatch();
  };
  tryOnScopeDispose(stop);
  return {
    isSupported,
    stop
  };
}
function useElementBounding(target, options = {}) {
  const {
    reset = true,
    windowResize = true,
    windowScroll = true,
    immediate = true,
    updateTiming = "sync"
  } = options;
  const height = ref(0);
  const bottom = ref(0);
  const left = ref(0);
  const right = ref(0);
  const top = ref(0);
  const width = ref(0);
  const x = ref(0);
  const y = ref(0);
  function recalculate() {
    const el = unrefElement(target);
    if (!el) {
      if (reset) {
        height.value = 0;
        bottom.value = 0;
        left.value = 0;
        right.value = 0;
        top.value = 0;
        width.value = 0;
        x.value = 0;
        y.value = 0;
      }
      return;
    }
    const rect = el.getBoundingClientRect();
    height.value = rect.height;
    bottom.value = rect.bottom;
    left.value = rect.left;
    right.value = rect.right;
    top.value = rect.top;
    width.value = rect.width;
    x.value = rect.x;
    y.value = rect.y;
  }
  function update() {
    if (updateTiming === "sync")
      recalculate();
    else if (updateTiming === "next-frame")
      requestAnimationFrame(() => recalculate());
  }
  useResizeObserver(target, update);
  watch(() => unrefElement(target), (ele) => !ele && update());
  useMutationObserver(target, update, {
    attributeFilter: ["style", "class"]
  });
  if (windowScroll)
    useEventListener("scroll", update, { capture: true, passive: true });
  if (windowResize)
    useEventListener("resize", update, { passive: true });
  tryOnMounted(() => {
    if (immediate)
      update();
  });
  return {
    height,
    bottom,
    left,
    right,
    top,
    width,
    x,
    y,
    update
  };
}
function useElementSize(target, initialSize = { width: 0, height: 0 }, options = {}) {
  const { window: window2 = defaultWindow, box = "content-box" } = options;
  const isSVG = computed(() => {
    var _a, _b;
    return (_b = (_a = unrefElement(target)) == null ? void 0 : _a.namespaceURI) == null ? void 0 : _b.includes("svg");
  });
  const width = ref(initialSize.width);
  const height = ref(initialSize.height);
  const { stop: stop1 } = useResizeObserver(
    target,
    ([entry]) => {
      const boxSize = box === "border-box" ? entry.borderBoxSize : box === "content-box" ? entry.contentBoxSize : entry.devicePixelContentBoxSize;
      if (window2 && isSVG.value) {
        const $elem = unrefElement(target);
        if ($elem) {
          const rect = $elem.getBoundingClientRect();
          width.value = rect.width;
          height.value = rect.height;
        }
      } else {
        if (boxSize) {
          const formatBoxSize = Array.isArray(boxSize) ? boxSize : [boxSize];
          width.value = formatBoxSize.reduce((acc, { inlineSize }) => acc + inlineSize, 0);
          height.value = formatBoxSize.reduce((acc, { blockSize }) => acc + blockSize, 0);
        } else {
          width.value = entry.contentRect.width;
          height.value = entry.contentRect.height;
        }
      }
    },
    options
  );
  tryOnMounted(() => {
    const ele = unrefElement(target);
    if (ele) {
      width.value = "offsetWidth" in ele ? ele.offsetWidth : initialSize.width;
      height.value = "offsetHeight" in ele ? ele.offsetHeight : initialSize.height;
    }
  });
  const stop2 = watch(
    () => unrefElement(target),
    (ele) => {
      width.value = ele ? initialSize.width : 0;
      height.value = ele ? initialSize.height : 0;
    }
  );
  function stop() {
    stop1();
    stop2();
  }
  return {
    width,
    height,
    stop
  };
}
function useFps(options) {
  var _a;
  const fps = ref(0);
  if (typeof performance === "undefined")
    return fps;
  const every = (_a = options == null ? void 0 : options.every) != null ? _a : 10;
  let last = performance.now();
  let ticks = 0;
  useRafFn(() => {
    ticks += 1;
    if (ticks >= every) {
      const now = performance.now();
      const diff = now - last;
      fps.value = Math.round(1e3 / (diff / ticks));
      last = now;
      ticks = 0;
    }
  });
  return fps;
}
function useMemory(options = {}) {
  const memory = ref();
  const isSupported = useSupported(() => typeof performance !== "undefined" && "memory" in performance);
  if (isSupported.value) {
    const { interval = 1e3 } = options;
    useIntervalFn(() => {
      memory.value = performance.memory;
    }, interval, { immediate: options.immediate, immediateCallback: options.immediateCallback });
  }
  return { isSupported, memory };
}
var defaultState = {
  x: 0,
  y: 0,
  pointerId: 0,
  pressure: 0,
  tiltX: 0,
  tiltY: 0,
  width: 0,
  height: 0,
  twist: 0,
  pointerType: null
};
var keys = Object.keys(defaultState);
function usePointer(options = {}) {
  const {
    target = defaultWindow
  } = options;
  const isInside = ref(false);
  const state = ref(options.initialValue || {});
  Object.assign(state.value, defaultState, state.value);
  const handler = (event) => {
    isInside.value = true;
    if (options.pointerTypes && !options.pointerTypes.includes(event.pointerType))
      return;
    state.value = objectPick(event, keys, false);
  };
  if (target) {
    const listenerOptions = { passive: true };
    useEventListener(target, ["pointerdown", "pointermove", "pointerup"], handler, listenerOptions);
    useEventListener(target, "pointerleave", () => isInside.value = false, listenerOptions);
  }
  return {
    ...toRefs2(state),
    isInside
  };
}
var DEFAULT_UNITS = [
  { max: 6e4, value: 1e3, name: "second" },
  { max: 276e4, value: 6e4, name: "minute" },
  { max: 72e6, value: 36e5, name: "hour" },
  { max: 5184e5, value: 864e5, name: "day" },
  { max: 24192e5, value: 6048e5, name: "week" },
  { max: 28512e6, value: 2592e6, name: "month" },
  { max: Number.POSITIVE_INFINITY, value: 31536e6, name: "year" }
];
var _TransitionPresets = {
  easeInSine: [0.12, 0, 0.39, 0],
  easeOutSine: [0.61, 1, 0.88, 1],
  easeInOutSine: [0.37, 0, 0.63, 1],
  easeInQuad: [0.11, 0, 0.5, 0],
  easeOutQuad: [0.5, 1, 0.89, 1],
  easeInOutQuad: [0.45, 0, 0.55, 1],
  easeInCubic: [0.32, 0, 0.67, 0],
  easeOutCubic: [0.33, 1, 0.68, 1],
  easeInOutCubic: [0.65, 0, 0.35, 1],
  easeInQuart: [0.5, 0, 0.75, 0],
  easeOutQuart: [0.25, 1, 0.5, 1],
  easeInOutQuart: [0.76, 0, 0.24, 1],
  easeInQuint: [0.64, 0, 0.78, 0],
  easeOutQuint: [0.22, 1, 0.36, 1],
  easeInOutQuint: [0.83, 0, 0.17, 1],
  easeInExpo: [0.7, 0, 0.84, 0],
  easeOutExpo: [0.16, 1, 0.3, 1],
  easeInOutExpo: [0.87, 0, 0.13, 1],
  easeInCirc: [0.55, 0, 1, 0.45],
  easeOutCirc: [0, 0.55, 0.45, 1],
  easeInOutCirc: [0.85, 0, 0.15, 1],
  easeInBack: [0.36, 0, 0.66, -0.56],
  easeOutBack: [0.34, 1.56, 0.64, 1],
  easeInOutBack: [0.68, -0.6, 0.32, 1.6]
};
var TransitionPresets = Object.assign({}, { linear: identity }, _TransitionPresets);
function useWindowSize(options = {}) {
  const {
    window: window2 = defaultWindow,
    initialWidth = Number.POSITIVE_INFINITY,
    initialHeight = Number.POSITIVE_INFINITY,
    listenOrientation = true,
    includeScrollbar = true,
    type = "inner"
  } = options;
  const width = ref(initialWidth);
  const height = ref(initialHeight);
  const update = () => {
    if (window2) {
      if (type === "outer") {
        width.value = window2.outerWidth;
        height.value = window2.outerHeight;
      } else if (includeScrollbar) {
        width.value = window2.innerWidth;
        height.value = window2.innerHeight;
      } else {
        width.value = window2.document.documentElement.clientWidth;
        height.value = window2.document.documentElement.clientHeight;
      }
    }
  };
  update();
  tryOnMounted(update);
  useEventListener("resize", update, { passive: true });
  if (listenOrientation) {
    const matches = useMediaQuery("(orientation: portrait)");
    watch(matches, () => update());
  }
  return { width, height };
}

// node_modules/@tresjs/core/dist/tres.js
var Et = Object.defineProperty;
var Tt = (e, t, n) => t in e ? Et(e, t, { enumerable: true, configurable: true, writable: true, value: n }) : e[t] = n;
var he = (e, t, n) => Tt(e, typeof t != "symbol" ? t + "" : t, n);
var dn = "@tresjs/core";
var pn = "module";
var mn = "4.3.1";
var hn = "pnpm@9.1.4";
var gn = "Declarative ThreeJS using Vue Components";
var vn = "Alvaro Saburido <hola@alvarosaburido.dev> (https://github.com/alvarosabu/)";
var yn = "MIT";
var _n = {
  type: "git",
  url: "git+https://github.com/Tresjs/tres.git"
};
var wn = [
  "vue",
  "3d",
  "threejs",
  "three",
  "threejs-vue"
];
var bn = false;
var Mn = {
  ".": {
    types: "./dist/index.d.ts",
    import: "./dist/tres.js",
    require: "./dist/tres.umd.cjs"
  },
  "./components": {
    types: "./dist/src/components/index.d.ts"
  },
  "./composables": {
    types: "./dist/src/composables/index.d.ts"
  },
  "./types": {
    types: "./dist/src/types/index.d.ts"
  },
  "./utils": {
    types: "./dist/src/utils/index.d.ts"
  },
  "./*": "./*"
};
var Pn = "./dist/tres.js";
var Cn = "./dist/tres.js";
var En = "./dist/index.d.ts";
var Tn = [
  "*.d.ts",
  "dist"
];
var Sn = {
  access: "public"
};
var xn = {
  dev: "cd playground/vue && npm run dev",
  "dev:nuxt": "cd playground/nuxt && npm run dev",
  build: "vite build",
  test: "vitest",
  "test:ci": "vitest run",
  "test:ui": "vitest --ui --coverage.enabled=true",
  release: "release-it",
  coverage: "vitest run --coverage",
  lint: "eslint .",
  "lint:fix": "eslint . --fix",
  "docs:dev": "vitepress dev docs",
  "docs:build": "vitepress build docs",
  "docs:serve": "vitepress serve docs",
  "docs:preview": "vitepress preview docs",
  "docs:contributors": "esno scripts/update-contributors.ts"
};
var An = {
  three: ">=0.133",
  vue: ">=3.4"
};
var kn = {
  "@alvarosabu/utils": "^3.2.0",
  "@vue/devtools-api": "^6.6.3",
  "@vueuse/core": "^11.1.0"
};
var Ln = {
  "@release-it/conventional-changelog": "^9.0.0",
  "@stackblitz/sdk": "^1.11.0",
  "@tresjs/cientos": "4.0.3",
  "@tresjs/eslint-config": "^1.4.0",
  "@types/three": "^0.169.0",
  "@typescript-eslint/eslint-plugin": "^8.8.1",
  "@typescript-eslint/parser": "^8.8.1",
  "@vitejs/plugin-vue": "^5.1.4",
  "@vitest/coverage-c8": "^0.33.0",
  "@vitest/coverage-v8": "^2.1.2",
  "@vitest/ui": "^2.1.2",
  "@vue/test-utils": "^2.4.6",
  eslint: "^9.12.0",
  "eslint-plugin-vue": "^9.29.0",
  esno: "^4.8.0",
  gsap: "^3.12.5",
  husky: "^9.1.6",
  jsdom: "^25.0.1",
  kolorist: "^1.8.0",
  ohmyfetch: "^0.4.21",
  pathe: "^1.1.2",
  "release-it": "^17.8.2",
  "rollup-plugin-analyzer": "^4.0.0",
  "rollup-plugin-copy": "^3.5.0",
  "rollup-plugin-visualizer": "^5.12.0",
  sponsorkit: "^0.15.5",
  three: "^0.169.0",
  unocss: "^0.63.4",
  unplugin: "^1.14.1",
  "unplugin-vue-components": "^0.27.4",
  vite: "^5.4.8",
  "vite-plugin-banner": "^0.8.0",
  "vite-plugin-dts": "4.2.4",
  "vite-plugin-inspect": "^0.8.7",
  "vite-plugin-require-transform": "^1.0.21",
  "vite-svg-loader": "^5.1.0",
  vitepress: "1.4.0",
  vitest: "^2.1.2",
  vue: "3.5.12",
  "vue-demi": "^0.14.10"
};
var Rn = {
  name: dn,
  type: pn,
  version: mn,
  packageManager: hn,
  description: gn,
  author: vn,
  license: yn,
  repository: _n,
  keywords: wn,
  sideEffects: bn,
  exports: Mn,
  main: Pn,
  module: Cn,
  types: En,
  files: Tn,
  publishConfig: Sn,
  scripts: xn,
  peerDependencies: An,
  dependencies: kn,
  devDependencies: Ln
};
function On(e) {
  const t = { nodes: {}, materials: {} };
  return e && e.traverse((n) => {
    n.name && (t.nodes[n.name] = n), n.material && !t.materials[n.material.name] && (t.materials[n.material.name] = n.material);
  }), t;
}
async function Dn(e, t, n, r, s) {
  const { logError: l } = V(), i = new e();
  return s && s(i), n && n(i), await new Promise((a, c) => {
    i.load(
      t,
      (o) => {
        const f = o;
        f.scene && Object.assign(f, On(f.scene)), a(f);
      },
      r,
      (o) => {
        l("[useLoader] - Failed to load resource", o), c(o);
      }
    );
  });
}
var Yr = defineComponent({
  __name: "component",
  props: {
    loader: {},
    url: {}
  },
  async setup(e) {
    let t, n;
    const r = e, s = ([t, n] = withAsyncContext(() => reactive(Dn(r.loader, r.url))), t = await t, n(), t);
    return (l, i) => renderSlot(l.$slots, "default", { data: unref(s) });
  }
});
var jn = class extends Mesh {
  constructor(...n) {
    super(...n);
    he(this, "type", "HightlightMesh");
    he(this, "createTime");
    this.createTime = Date.now();
  }
  onBeforeRender() {
    const r = (Date.now() - this.createTime) / 1e3, i = 1 + 0.07 * Math.sin(2.5 * r);
    this.scale.set(i, i, i);
  }
};
function Me(e) {
  return typeof e > "u";
}
function de(e) {
  return Array.isArray(e);
}
function Bn(e) {
  return typeof e == "number";
}
function ft(e) {
  return typeof e == "string";
}
function G(e) {
  return typeof e == "function";
}
function H(e) {
  return e === Object(e) && !de(e) && !G(e);
}
function N(e) {
  return H(e) && "isObject3D" in e && !!e.isObject3D;
}
function ze(e) {
  return H(e) && "isCamera" in e && !!e.isCamera;
}
function In(e) {
  return H(e) && "isBufferGeometry" in e && !!e.isBufferGeometry;
}
function $n(e) {
  return H(e) && "isMaterial" in e && !!e.isMaterial;
}
function Hn(e) {
  return H(e) && "isLight" in e && !!e.isLight;
}
function Un(e) {
  return H(e) && "isFog" in e && !!e.isFog;
}
function Fn(e) {
  return H(e) && "isScene" in e && !!e.isScene;
}
function re(e) {
  return N(e) || In(e) || $n(e) || Un(e);
}
function Wn(e) {
  return H(e) && !!e.isPrimitive;
}
var dt = (e, t) => {
  for (const n of Object.keys(t))
    t[n] instanceof Object && Object.assign(t[n], dt(e[n], t[n]));
  return Object.assign(e || {}, t), e;
};
var Nn = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
var zn = Yn(Nn);
function Ge(e) {
  return e && e.nodeType === 1;
}
function oe(e) {
  return e.replace(/-([a-z])/g, (t, n) => n.toUpperCase());
}
var Gn = /\B([A-Z])/g;
function Vn(e) {
  return e.replace(Gn, "-$1").toLowerCase();
}
function Yn(e, t) {
  const n = /* @__PURE__ */ Object.create(null), r = e.split(",");
  for (let s = 0; s < r.length; s++)
    n[r[s]] = true;
  return (s) => !!n[s];
}
var Ve = (e, t) => {
  if (!t)
    return;
  const n = Array.isArray(t) ? t : t.match(/([^[.\]])+/g);
  return n == null ? void 0 : n.reduce((r, s) => r && r[s], e);
};
var qn = (e, t, n) => {
  const r = Array.isArray(t) ? t : t.match(/([^[.\]])+/g);
  r && r.reduce((s, l, i) => (s[l] === void 0 && (s[l] = {}), i === r.length - 1 && (s[l] = n), s[l]), e);
};
function pt(e, t) {
  if (Ge(e) && Ge(t)) {
    const s = e.attributes, l = t.attributes;
    return s.length !== l.length ? false : Array.from(s).every(({ name: i, value: a }) => t.getAttribute(i) === a);
  }
  if (e === t)
    return true;
  if (e === null || typeof e != "object" || t === null || typeof t != "object")
    return false;
  const n = Object.keys(e), r = Object.keys(t);
  if (n.length !== r.length)
    return false;
  for (const s of n)
    if (!r.includes(s) || !pt(e[s], t[s]))
      return false;
  return true;
}
function Kn(e, t) {
  if (!Array.isArray(e) || !Array.isArray(t) || e.length !== t.length)
    return false;
  for (let n = 0; n < e.length; n++)
    if (!pt(e[n], t[n]))
      return false;
  return true;
}
var Jn = Array.isArray;
function Qn(e, t, n, r) {
  const s = (c) => {
    if (c.uuid === t)
      return c;
    for (const o of c.children) {
      const f = s(o);
      if (f)
        return f;
    }
  }, l = s(e);
  if (!l) {
    console.warn("Object with UUID not found in the scene.");
    return;
  }
  let i = l;
  for (let c = 0; c < n.length - 1; c++)
    if (i[n[c]] !== void 0)
      i = i[n[c]];
    else {
      console.warn(`Property path is not valid: ${n.join(".")}`);
      return;
    }
  const a = n[n.length - 1];
  i[a] !== void 0 ? i[a] = r : console.warn(`Property path is not valid: ${n.join(".")}`);
}
function Xn(e) {
  const t = new MeshBasicMaterial({
    color: 11003607,
    // Highlight color, e.g., yellow
    transparent: true,
    opacity: 0.2,
    depthTest: false,
    // So the highlight is always visible
    side: DoubleSide
    // To e
  });
  return new jn(e.geometry.clone(), t);
}
function Zn(e) {
  var n;
  let t = e.value;
  return e.value && ((n = e.value) != null && n.isMesh) && (t = e.value.position), Array.isArray(e.value) && (t = new Vector3(...t)), t;
}
function er(e) {
  return "map" in e;
}
function Ye(e) {
  er(e) && e.map && e.map.dispose(), e.dispose();
}
function mt(e) {
  var n, r;
  if (e.parent && ((n = e.removeFromParent) == null || n.call(e)), delete e.__tres, [...e.children].forEach((s) => mt(s)), !(e instanceof Scene)) {
    const s = e;
    e && ((r = e.dispose) == null || r.call(e)), s.geometry && (s.geometry.dispose(), delete s.geometry), Array.isArray(s.material) ? (s.material.forEach((l) => Ye(l)), delete s.material) : s.material && (Ye(s.material), delete s.material);
  }
}
function tr(e, t) {
  let n = 0;
  for (let r = 0; r < e.length; r++)
    t(e[r], r) && (e[n] = e[r], n++);
  return e.length = n, e;
}
function Pe(e, t) {
  let n = e;
  if (t.includes("-")) {
    const r = t.split("-");
    let s = r.shift();
    for (; n && r.length; )
      s in n ? (n = n[s], s = r.shift()) : s = qe(s, r.shift());
    return { target: n, key: qe(s, ...r) };
  } else
    return { target: n, key: t };
}
function qe(...e) {
  return e.map((t, n) => n === 0 ? t : t.charAt(0).toUpperCase() + t.slice(1)).join("");
}
var Ke = /-\d+$/;
function nr(e, t, n) {
  if (ft(n)) {
    if (Ke.test(n)) {
      const l = n.replace(Ke, ""), { target: i, key: a } = Pe(e, l);
      if (!Array.isArray(i[a])) {
        const c = i[a], o = [];
        o.__tresDetach = () => {
          o.every((f) => Me(f)) && (i[a] = c);
        }, i[a] = o;
      }
    }
    const { target: r, key: s } = Pe(e, n);
    t.__tres.previousAttach = r[s], r[s] = Q(t);
  } else
    t.__tres.previousAttach = n(e, t);
}
function rr(e, t, n) {
  var r, s, l;
  if (ft(n)) {
    const { target: i, key: a } = Pe(e, n), c = t.__tres.previousAttach;
    c === void 0 ? delete i[a] : i[a] = c, "__tresDetach" in i && i.__tresDetach();
  } else
    (s = (r = t.__tres) == null ? void 0 : r.previousAttach) == null || s.call(r, e, t);
  (l = t.__tres) == null || delete l.previousAttach;
}
function z(e, t, n) {
  const r = e;
  return r.__tres = {
    type: "unknown",
    eventCount: 0,
    root: n,
    handlers: {},
    memoizedProps: {},
    objects: [],
    parent: null,
    previousAttach: null,
    ...t
  }, r.__tres.attach || (r.isMaterial ? r.__tres.attach = "material" : r.isBufferGeometry ? r.__tres.attach = "geometry" : r.isFog && (r.__tres.attach = "fog")), r;
}
function ht(e) {
  var n;
  const t = (n = e == null ? void 0 : e.__tres) == null ? void 0 : n.root;
  t && t.render && t.render.canBeInvalidated.value && t.invalidate();
}
function or(e, t, n) {
  var s;
  if (!G(e.setPixelRatio))
    return;
  let r = 0;
  if (de(n) && n.length >= 2) {
    const [l, i] = n;
    r = MathUtils.clamp(t, l, i);
  } else Bn(n) ? r = n : r = t;
  r !== ((s = e.getPixelRatio) == null ? void 0 : s.call(e)) && e.setPixelRatio(r);
}
function sr(e, t, n, r, s) {
  const l = [...t.__tres.objects], i = Q(t);
  if (e = Q(e), i === e)
    return true;
  const a = z(e, t.__tres ?? {}, s), c = t.parent ?? t.__tres.parent ?? null, o = { ...t.__tres.memoizedProps };
  delete o.object;
  for (const f of l)
    gt(f, s), vt(f, s);
  i.__tres.objects = [], r.remove(t);
  for (const [f, y] of Object.entries(o))
    r.patchProp(a, f, a[f], y);
  n(e), r.insert(t, c);
  for (const f of l)
    r.insert(f, t);
  return true;
}
function Q(e) {
  return Wn(e) ? (e.object.__tres = e.__tres, e.object) : e;
}
function gt(e, t) {
  var r, s, l, i;
  const n = ((r = e.__tres) == null ? void 0 : r.parent) || t.scene.value;
  e.__tres && (e.__tres.parent = null), n && n.__tres && "objects" in n.__tres && tr(n.__tres.objects, (a) => a !== e), (s = e.__tres) != null && s.attach ? rr(n, e, e.__tres.attach) : ((i = (l = e.parent) == null ? void 0 : l.remove) == null || i.call(l, Q(e)), e.parent = null);
}
function vt(e, t) {
  var n;
  (n = e.traverse) == null || n.call(e, (r) => {
    var s;
    t.deregisterCamera(r), (s = t.eventManager) == null || s.deregisterPointerMissedObject(r);
  }), t.deregisterCamera(e), ht(e);
}
async function ir(e, t) {
  const n = new TextureLoader(t), r = (s) => new Promise((l, i) => {
    n.load(
      s,
      (a) => l(a),
      () => null,
      () => {
        i(new Error("[useTextures] - Failed to load texture"));
      }
    );
  });
  if (Jn(e)) {
    const s = await Promise.all(e.map((l) => r(l)));
    return e.length > 1 ? s : s[0];
  } else {
    const {
      map: s,
      displacementMap: l,
      normalMap: i,
      roughnessMap: a,
      metalnessMap: c,
      aoMap: o,
      alphaMap: f,
      matcap: y
    } = e;
    return {
      map: s ? await r(s) : null,
      displacementMap: l ? await r(l) : null,
      normalMap: i ? await r(i) : null,
      roughnessMap: a ? await r(a) : null,
      metalnessMap: c ? await r(c) : null,
      aoMap: o ? await r(o) : null,
      alphaMap: f ? await r(f) : null,
      matcap: y ? await r(y) : null
    };
  }
}
var qr = defineComponent({
  __name: "component",
  props: {
    map: {},
    displacementMap: {},
    normalMap: {},
    roughnessMap: {},
    metalnessMap: {},
    aoMap: {},
    alphaMap: {},
    matcap: {}
  },
  async setup(e) {
    let t, n;
    const r = e, s = ([t, n] = withAsyncContext(() => reactive(ir(r))), t = await t, n(), t);
    return (l, i) => renderSlot(l.$slots, "default", { textures: unref(s) });
  }
});
var ar = ({ sizes: e }) => {
  const t = ref([]), n = computed(
    () => t.value[0]
  ), r = (i) => {
    const a = i instanceof Camera ? i : t.value.find((o) => o.uuid === i);
    if (!a)
      return;
    const c = t.value.filter(({ uuid: o }) => o !== a.uuid);
    t.value = [a, ...c];
  }, s = (i, a = false) => {
    if (ze(i)) {
      const c = i;
      if (t.value.some(({ uuid: o }) => o === c.uuid))
        return;
      a ? r(c) : t.value.push(c);
    }
  }, l = (i) => {
    if (ze(i)) {
      const a = i;
      t.value = t.value.filter(({ uuid: c }) => c !== a.uuid);
    }
  };
  return watchEffect(() => {
    e.aspectRatio.value && t.value.forEach((i) => {
      !i.manual && (i instanceof PerspectiveCamera || lr(i)) && (i instanceof PerspectiveCamera ? i.aspect = e.aspectRatio.value : (i.left = e.width.value * -0.5, i.right = e.width.value * 0.5, i.top = e.height.value * 0.5, i.bottom = e.height.value * -0.5), i.updateProjectionMatrix());
    });
  }), onUnmounted(() => {
    t.value = [];
  }), {
    camera: n,
    cameras: t,
    registerCamera: s,
    deregisterCamera: l,
    setCameraActive: r
  };
};
function lr(e) {
  return e.hasOwnProperty("isOrthographicCamera") && e.isOrthographicCamera;
}
var Kr = true;
var pe = "[TresJS ▲ ■ ●] ";
function cr(...e) {
  typeof e[0] == "string" ? e[0] = pe + e[0] : e.unshift(pe), console.error(...e);
}
function ur(...e) {
  typeof e[0] == "string" ? e[0] = pe + e[0] : e.unshift(pe), console.warn(...e);
}
function fr(e, t) {
}
function V() {
  return {
    logError: cr,
    logWarning: ur,
    logMessage: fr
  };
}
var Ce = ref({});
var Ee = (e) => Object.assign(Ce.value, e);
function ye() {
  const e = /* @__PURE__ */ new Map(), t = /* @__PURE__ */ new Set();
  let n = 0, r = false;
  const s = () => {
    const o = Array.from(e.entries()).sort((f, y) => {
      const u = f[1].priority - y[1].priority;
      return u === 0 ? f[1].addI - y[1].addI : u;
    });
    t.clear(), o.forEach((f) => t.add(f[0]));
  }, l = (o) => {
    e.delete(o), t.delete(o);
  };
  return { on: (o, f = 0) => {
    e.set(o, { priority: f, addI: n++ });
    const y = () => l(o);
    return tryOnScopeDispose(y), r = true, {
      off: y
    };
  }, off: l, trigger: (...o) => {
    r && (s(), r = false), t.forEach((f) => f(...o));
  }, dispose: () => {
    e.clear(), t.clear();
  }, get count() {
    return e.size;
  } };
}
function dr() {
  let e = true, t = true, n = false;
  const r = new Clock(false), s = ref(r.running), l = ref(false);
  let i;
  const a = MathUtils.generateUUID();
  let c = null;
  const o = ye(), f = ye(), y = ye();
  E();
  let u = {};
  function v(M) {
    u = M;
  }
  function h2(M, A, p = 0) {
    switch (A) {
      case "before":
        return o.on(M, p);
      case "render":
        return c || (c = M), f.dispose(), f.on(M);
      case "after":
        return y.on(M, p);
    }
  }
  function g() {
    t && (t = false, E(), b());
  }
  function d() {
    t = true, E(), cancelAnimationFrame(i);
  }
  function _() {
    n = false, E();
  }
  function P() {
    n = true, E();
  }
  function C() {
    l.value = true;
  }
  function T() {
    l.value = false;
  }
  function b() {
    if (!e) {
      i = requestAnimationFrame(b);
      return;
    }
    const M = r.getDelta(), A = r.getElapsedTime(), p = {
      camera: unref(u.camera),
      scene: unref(u.scene),
      renderer: unref(u.renderer),
      raycaster: unref(u.raycaster),
      controls: unref(u.controls),
      invalidate: u.invalidate,
      advance: u.advance
    }, w = { delta: M, elapsed: A, clock: r, ...p };
    s.value && o.trigger(w), l.value || (f.count ? f.trigger(w) : c && c(w)), s.value && y.trigger(w), i = requestAnimationFrame(b);
  }
  function E() {
    const M = !t && !n;
    r.running !== M && (r.running ? r.stop() : r.start()), s.value = r.running;
  }
  return {
    loopId: a,
    register: (M, A, p) => h2(M, A, p),
    start: g,
    stop: d,
    pause: P,
    resume: _,
    pauseRender: C,
    resumeRender: T,
    isRenderPaused: l,
    isActive: s,
    setContext: v,
    setReady: (M) => e = M
  };
}
function ke(e) {
  let t = 0;
  return e.traverse((n) => {
    if (n.isMesh && n.geometry && n.type !== "HightlightMesh") {
      const r = n.geometry, s = r.attributes.position.count * 3 * Float32Array.BYTES_PER_ELEMENT, l = r.index ? r.index.count * Uint32Array.BYTES_PER_ELEMENT : 0, i = r.attributes.normal ? r.attributes.normal.count * 3 * Float32Array.BYTES_PER_ELEMENT : 0, a = r.attributes.uv ? r.attributes.uv.count * 2 * Float32Array.BYTES_PER_ELEMENT : 0, c = s + l + i + a;
      t += c;
    }
  }), t;
}
function pr(e) {
  return (e / 1024).toFixed(2);
}
var mr = Number.parseInt(REVISION.replace("dev", ""));
function Jr(e) {
  return typeof e == "number" ? [e, e, e] : e instanceof Vector3 ? [e.x, e.y, e.z] : e;
}
function hr(e) {
  return e instanceof Color ? e : Array.isArray(e) ? new Color(...e) : new Color(e);
}
var se = {
  realistic: {
    shadows: true,
    physicallyCorrectLights: true,
    outputColorSpace: SRGBColorSpace,
    toneMapping: ACESFilmicToneMapping,
    toneMappingExposure: 3,
    shadowMap: {
      enabled: true,
      type: PCFSoftShadowMap
    }
  },
  flat: {
    toneMapping: NoToneMapping,
    toneMappingExposure: 1
  }
};
function gr({
  canvas: e,
  options: t,
  contextParts: { sizes: n, render: r, invalidate: s, advance: l }
}) {
  const i = computed(() => ({
    alpha: toValue(t.alpha) ?? true,
    depth: toValue(t.depth),
    canvas: unrefElement(e),
    context: toValue(t.context),
    stencil: toValue(t.stencil),
    antialias: toValue(t.antialias) ?? true,
    precision: toValue(t.precision),
    powerPreference: toValue(t.powerPreference),
    premultipliedAlpha: toValue(t.premultipliedAlpha),
    preserveDrawingBuffer: toValue(t.preserveDrawingBuffer),
    logarithmicDepthBuffer: toValue(t.logarithmicDepthBuffer),
    failIfMajorPerformanceCaveat: toValue(t.failIfMajorPerformanceCaveat)
  })), a = shallowRef(new WebGLRenderer(i.value));
  function c() {
    t.renderMode === "on-demand" && s();
  }
  watch(i, () => {
    a.value.dispose(), a.value = new WebGLRenderer(i.value), c();
  }), watch([n.width, n.height], () => {
    a.value.setSize(n.width.value, n.height.value), c();
  }, {
    immediate: true
  }), watch(() => t.clearColor, c);
  const { pixelRatio: o } = useDevicePixelRatio(), { logError: f } = V(), u = (() => {
    const h2 = new WebGLRenderer(), g = {
      shadowMap: {
        enabled: h2.shadowMap.enabled,
        type: h2.shadowMap.type
      },
      toneMapping: h2.toneMapping,
      toneMappingExposure: h2.toneMappingExposure,
      outputColorSpace: h2.outputColorSpace
    };
    return h2.dispose(), g;
  })(), v = toValue(t.renderMode);
  return v === "on-demand" && s(), v === "manual" && setTimeout(() => {
    l();
  }, 100), watchEffect(() => {
    const h2 = toValue(t.preset);
    h2 && (h2 in se || f(`Renderer Preset must be one of these: ${Object.keys(se).join(", ")}`), dt(a.value, se[h2])), or(a.value, o.value, toValue(t.dpr)), v === "always" && (r.frames.value = Math.max(1, r.frames.value));
    const g = (P, C) => {
      const T = toValue(P), b = () => {
        if (h2)
          return Ve(se[h2], C);
      };
      if (T !== void 0)
        return T;
      const E = b();
      return E !== void 0 ? E : Ve(u, C);
    }, d = (P, C) => qn(a.value, C, g(P, C));
    d(t.shadows, "shadowMap.enabled"), d(t.toneMapping ?? ACESFilmicToneMapping, "toneMapping"), d(t.shadowMapType, "shadowMap.type"), mr < 150 && d(!t.useLegacyLights, "physicallyCorrectLights"), d(t.outputColorSpace, "outputColorSpace"), d(t.toneMappingExposure, "toneMappingExposure");
    const _ = g(t.clearColor, "clearColor");
    _ && a.value.setClearColor(
      _ ? hr(_) : new Color(0)
      // default clear color is not easily/efficiently retrievable from three
    );
  }), onUnmounted(() => {
    a.value.dispose(), a.value.forceContextLoss();
  }), {
    renderer: a
  };
}
function vr(e, t, n = 10) {
  const r = toValue(e) ? useWindowSize() : useElementSize(computed(() => toValue(t).parentElement)), s = readonly(refDebounced(r.width, n)), l = readonly(refDebounced(r.height, n)), i = computed(() => s.value / l.value);
  return {
    height: l,
    width: s,
    aspectRatio: i
  };
}
var yr = (e, t) => {
  const n = computed(() => t.renderer.value.domElement), r = shallowRef([]), { x: s, y: l } = usePointer({ target: n });
  let i = 0;
  const { width: a, height: c, top: o, left: f } = useElementBounding(n), y = ({ x: m, y: S }) => {
    if (n.value)
      return {
        x: (m - f.value) / a.value * 2 - 1,
        y: -((S - o.value) / c.value) * 2 + 1
      };
  }, u = ({ x: m, y: S }) => {
    if (t.camera.value)
      return t.raycaster.value.setFromCamera(new Vector2(m, S), t.camera.value), r.value = t.raycaster.value.intersectObjects(e.value, true), r.value;
  }, v = (m) => {
    const S = y({
      x: (m == null ? void 0 : m.clientX) ?? s.value,
      y: (m == null ? void 0 : m.clientY) ?? l.value
    });
    return S ? u(S) || [] : [];
  }, h2 = createEventHook(), g = createEventHook(), d = createEventHook(), _ = createEventHook(), P = createEventHook(), C = createEventHook(), T = createEventHook(), b = createEventHook();
  function E(m) {
    const S = {};
    for (const U in m)
      typeof U != "function" && (S[U] = m[U]);
    return S;
  }
  const M = (m, S) => {
    var Be, Ie, $e;
    const U = E(S), ne = new Vector3(S == null ? void 0 : S.clientX, S == null ? void 0 : S.clientY, 0).unproject((Be = t.camera) == null ? void 0 : Be.value);
    m.trigger({
      ...U,
      intersections: r.value,
      // The unprojectedPoint is wrong, math needs to be fixed
      unprojectedPoint: ne,
      ray: (Ie = t.raycaster) == null ? void 0 : Ie.value.ray,
      camera: ($e = t.camera) == null ? void 0 : $e.value,
      sourceEvent: S,
      delta: i,
      stopPropagating: false
    });
  };
  let A;
  const p = (m) => {
    v(m), M(d, m), A = m;
  }, w = () => {
    A && p(A);
  };
  let k, L, R;
  const j = (m) => {
    var S;
    k = (S = r.value[0]) == null ? void 0 : S.object, i = 0, L = new Vector2(
      (m == null ? void 0 : m.clientX) ?? s.value,
      (m == null ? void 0 : m.clientY) ?? l.value
    ), M(P, m);
  };
  let O, Y = false;
  const Re = (m) => {
    var S, U, ne;
    m instanceof PointerEvent && (r.value.length === 0 && M(C, m), k === ((S = r.value[0]) == null ? void 0 : S.object) && (R = new Vector2(
      (m == null ? void 0 : m.clientX) ?? s.value,
      (m == null ? void 0 : m.clientY) ?? l.value
    ), i = L == null ? void 0 : L.distanceTo(R), m.button === 0 ? (M(h2, m), O === ((U = r.value[0]) == null ? void 0 : U.object) ? Y = true : (O = (ne = r.value[0]) == null ? void 0 : ne.object, Y = false)) : m.button === 2 && M(T, m)), M(_, m));
  }, Oe = (m) => {
    Y && (M(g, m), O = void 0, Y = false);
  }, De = (m) => M(d, m), je = (m) => M(b, m);
  return n.value.addEventListener("pointerup", Re), n.value.addEventListener("pointerdown", j), n.value.addEventListener("pointermove", p), n.value.addEventListener("pointerleave", De), n.value.addEventListener("dblclick", Oe), n.value.addEventListener("wheel", je), onUnmounted(() => {
    n != null && n.value && (n.value.removeEventListener("pointerup", Re), n.value.removeEventListener("pointerdown", j), n.value.removeEventListener("pointermove", p), n.value.removeEventListener("pointerleave", De), n.value.removeEventListener("dblclick", Oe), n.value.removeEventListener("wheel", je));
  }), {
    intersects: r,
    onClick: (m) => h2.on(m).off,
    onDblClick: (m) => g.on(m).off,
    onContextMenu: (m) => T.on(m).off,
    onPointerMove: (m) => d.on(m).off,
    onPointerUp: (m) => _.on(m).off,
    onPointerDown: (m) => P.on(m).off,
    onPointerMissed: (m) => C.on(m).off,
    onWheel: (m) => b.on(m).off,
    forceUpdate: w
  };
};
function _e(e, t) {
  if (Array.isArray(e))
    for (const n of e)
      n(t);
  typeof e == "function" && e(t);
}
function _r(e, t, n) {
  var A;
  const r = shallowRef(), s = shallowRef();
  e && (r.value = e), t && (s.value = t);
  const l = (p) => {
    var w;
    return ((w = p.__tres) == null ? void 0 : w.eventCount) > 0;
  }, i = (p) => {
    var w;
    return ((w = p.children) == null ? void 0 : w.some((k) => i(k))) || l(p);
  }, a = shallowRef(((A = r.value) == null ? void 0 : A.children).filter(i) || []);
  function c(p, w) {
    const k = [], L = () => w.stopPropagating = true;
    w.stopPropagation = L;
    for (const R of w == null ? void 0 : w.intersections) {
      if (w.stopPropagating)
        return;
      w = { ...w, ...R };
      const { object: j } = R;
      w.eventObject = j, _e(j[p], w), k.push(j);
      let O = j.parent;
      for (; O !== null && !w.stopPropagating && !k.includes(O); )
        w.eventObject = O, _e(O[p], w), k.push(O), O = O.parent;
      const Y = Vn(p.slice(2));
      n(Y, { intersection: R, event: w });
    }
  }
  const {
    onClick: o,
    onDblClick: f,
    onContextMenu: y,
    onPointerMove: u,
    onPointerDown: v,
    onPointerUp: h2,
    onPointerMissed: g,
    onWheel: d,
    forceUpdate: _
  } = yr(a, t);
  h2((p) => c("onPointerUp", p)), v((p) => c("onPointerDown", p)), o((p) => c("onClick", p)), f((p) => c("onDoubleClick", p)), y((p) => c("onContextMenu", p)), d((p) => c("onWheel", p));
  let P = [];
  u((p) => {
    const w = p.intersections.map(({ object: L }) => L), k = p.intersections;
    P.forEach(({ object: L }) => {
      w.includes(L) || (p.intersections = P, c("onPointerLeave", p), c("onPointerOut", p));
    }), p.intersections = k, p.intersections.forEach(({ object: L }) => {
      P.includes(L) || (c("onPointerEnter", p), c("onPointerOver", p));
    }), c("onPointerMove", p), P = p.intersections;
  });
  const C = [];
  g((p) => {
    const w = () => p.stopPropagating = true;
    p.stopPropagation = w, C.forEach((k) => {
      p.stopPropagating || (p.eventObject = k, _e(k.onPointerMissed, p));
    }), n("pointer-missed", { event: p });
  });
  function T(p) {
    re(p) && N(p) && a.value.push(p);
  }
  function b(p) {
    if (re(p) && N(p)) {
      const w = a.value.indexOf(p);
      w > -1 && a.value.splice(w, 1);
    }
  }
  function E(p) {
    re(p) && N(p) && p.onPointerMissed && C.push(p);
  }
  function M(p) {
    if (re(p) && N(p)) {
      const w = C.indexOf(p);
      w > -1 && C.splice(w, 1);
    }
  }
  return t.eventManager = {
    forceUpdate: _,
    registerObject: T,
    deregisterObject: b,
    registerPointerMissedObject: E,
    deregisterPointerMissedObject: M
  }, {
    forceUpdate: _,
    registerObject: T,
    deregisterObject: b,
    registerPointerMissedObject: E,
    deregisterPointerMissedObject: M
  };
}
function wr(e, t, n = 100) {
  n = n <= 0 ? 100 : n;
  const r = createEventHook(), s = /* @__PURE__ */ new Set();
  let l = false, i = false, a = null;
  function c() {
    a && clearTimeout(a), !i && !l && e() ? (r.trigger(t), s.forEach((u) => u()), s.clear(), l = true) : !i && !l && (a = setTimeout(c, n));
  }
  function o() {
    i = true, a && clearTimeout(a);
  }
  c();
  const f = (u, ...v) => {
    u(...v);
  };
  return {
    on: (u) => {
      if (l)
        return f(u, t), { off: () => {
        } };
      {
        const v = r.on(u);
        return s.add(v.off), r.on(u);
      }
    },
    off: r.off,
    trigger: r.trigger,
    cancel: o
  };
}
var ee = /* @__PURE__ */ new WeakMap();
function yt(e) {
  if (e = e || me(), ee.has(e))
    return ee.get(e);
  const t = 100, n = Date.now(), l = wr(() => {
    if (Date.now() - n >= t)
      return true;
    {
      const i = e.renderer.value, a = (i == null ? void 0 : i.domElement) || { width: 0, height: 0 };
      return !!(i && a.width > 0 && a.height > 0);
    }
  }, e);
  return ee.set(e, l), l;
}
function Qr(e) {
  const t = me();
  if (t)
    return ee.has(t) ? ee.get(t).on(e) : yt(t).on(e);
}
function br({
  scene: e,
  canvas: t,
  windowSize: n,
  rendererOptions: r,
  emit: s
}) {
  const l = shallowRef(e), i = vr(n, t), {
    camera: a,
    cameras: c,
    registerCamera: o,
    deregisterCamera: f,
    setCameraActive: y
  } = ar({ sizes: i, scene: e }), u = {
    mode: ref(r.renderMode || "always"),
    priority: ref(0),
    frames: ref(0),
    maxFrames: 60,
    canBeInvalidated: computed(() => u.mode.value === "on-demand" && u.frames.value === 0)
  };
  function v(R = 1) {
    r.renderMode === "on-demand" && (u.frames.value = Math.min(u.maxFrames, u.frames.value + R));
  }
  function h2() {
    r.renderMode === "manual" && (u.frames.value = 1);
  }
  const { renderer: g } = gr(
    {
      scene: e,
      canvas: t,
      options: r,
      emit: s,
      // TODO: replace contextParts with full ctx at https://github.com/Tresjs/tres/issues/516
      contextParts: { sizes: i, camera: a, render: u, invalidate: v, advance: h2 }
    }
  ), d = {
    sizes: i,
    scene: l,
    camera: a,
    cameras: readonly(c),
    renderer: g,
    raycaster: shallowRef(new Raycaster()),
    controls: ref(null),
    perf: {
      maxFrames: 160,
      fps: {
        value: 0,
        accumulator: []
      },
      memory: {
        currentMem: 0,
        allocatedMem: 0,
        accumulator: []
      }
    },
    render: u,
    advance: h2,
    extend: Ee,
    invalidate: v,
    registerCamera: o,
    setCameraActive: y,
    deregisterCamera: f,
    loop: dr()
  };
  provide("useTres", d), d.scene.value.__tres = {
    root: d
  }, d.loop.register(() => {
    a.value && u.frames.value > 0 && (g.value.render(e, a.value), s("render", d.renderer.value)), u.priority.value = 0, u.mode.value === "always" ? u.frames.value = 1 : u.frames.value = Math.max(0, u.frames.value - 1);
  }, "render");
  const { on: _, cancel: P } = yt(d);
  d.loop.setReady(false), d.loop.start(), _(() => {
    s("ready", d), d.loop.setReady(true), _r(e, d, s);
  }), onUnmounted(() => {
    P(), d.loop.stop();
  });
  const C = 100, T = useFps({ every: C }), { isSupported: b, memory: E } = useMemory({ interval: C }), M = 160;
  let A = performance.now();
  const p = ({ timestamp: R }) => {
    d.scene.value && (d.perf.memory.allocatedMem = ke(d.scene.value)), R - A >= C && (A = R, d.perf.fps.accumulator.push(T.value), d.perf.fps.accumulator.length > M && d.perf.fps.accumulator.shift(), d.perf.fps.value = T.value, b.value && E.value && (d.perf.memory.accumulator.push(E.value.usedJSHeapSize / 1024 / 1024), d.perf.memory.accumulator.length > M && d.perf.memory.accumulator.shift(), d.perf.memory.currentMem = d.perf.memory.accumulator.reduce((j, O) => j + O, 0) / d.perf.memory.accumulator.length));
  };
  let w = 0;
  const k = 1, { pause: L } = useRafFn(({ delta: R }) => {
    window.__TRES__DEVTOOLS__ && (p({ timestamp: performance.now() }), w += R, w >= k && (window.__TRES__DEVTOOLS__.cb(d), w = 0));
  }, { immediate: true });
  return onUnmounted(() => {
    L();
  }), d;
}
function me() {
  const e = inject("useTres");
  if (!e)
    throw new Error("useTresContext must be used together with useTresContextProvider");
  return e;
}
var Xr = me;
function Zr() {
  const {
    camera: e,
    scene: t,
    renderer: n,
    loop: r,
    raycaster: s,
    controls: l,
    invalidate: i,
    advance: a
  } = me();
  r.setContext({
    camera: e,
    scene: t,
    renderer: n,
    raycaster: s,
    controls: l,
    invalidate: i,
    advance: a
  });
  function c(y, u = 0) {
    return r.register(y, "before", u);
  }
  function o(y) {
    return r.register(y, "render");
  }
  function f(y, u = 0) {
    return r.register(y, "after", u);
  }
  return {
    pause: r.pause,
    resume: r.resume,
    pauseRender: r.pauseRender,
    resumeRender: r.resumeRender,
    isActive: r.isActive,
    onBeforeRender: c,
    render: o,
    onAfterRender: f
  };
}
var _t = createEventHook();
var wt = createEventHook();
var Le = createEventHook();
var te = new Clock();
var ce = 0;
var ue = 0;
var { pause: Mr, resume: Je, isActive: Pr } = useRafFn(
  () => {
    _t.trigger({ delta: ce, elapsed: ue, clock: te }), wt.trigger({ delta: ce, elapsed: ue, clock: te }), Le.trigger({ delta: ce, elapsed: ue, clock: te });
  },
  { immediate: false }
);
Le.on(() => {
  ce = te.getDelta(), ue = te.getElapsedTime();
});
var Qe = false;
var eo = () => (Qe || (Qe = true, Je()), {
  onBeforeLoop: _t.on,
  onLoop: wt.on,
  onAfterLoop: Le.on,
  pause: Mr,
  resume: Je,
  isActive: Pr
});
function to() {
  const { logWarning: e } = V();
  function t(l, i, a) {
    let c = null;
    return l.traverse((o) => {
      o[i] === a && (c = o);
    }), c || e(`Child with ${i} '${a}' not found.`), c;
  }
  function n(l, i, a) {
    const c = [];
    return l.traverse((o) => {
      o[i].includes(a) && c.push(o);
    }), c.length || e(`Children with ${i} '${a}' not found.`), c;
  }
  function r(l, i) {
    return t(l, "name", i);
  }
  function s(l, i) {
    return n(l, "name", i);
  }
  return {
    seek: t,
    seekByName: r,
    seekAll: n,
    seekAllByName: s
  };
}
function Cr(e, t = {}, n = {}) {
  let r = e;
  const s = (a) => {
    r = a;
  };
  let l = new Proxy({}, {});
  const i = {
    has(a, c) {
      return c in t || c in r;
    },
    get(a, c, o) {
      return c in t ? t[c](r) : r[c];
    },
    set(a, c, o) {
      return n[c] ? n[c](o, r, l, s) : r[c] = o, true;
    }
  };
  return l = new Proxy({}, i), l;
}
var { logError: Xe } = V();
var Ze = [
  "onClick",
  "onContextMenu",
  "onPointerMove",
  "onPointerEnter",
  "onPointerLeave",
  "onPointerOver",
  "onPointerOut",
  "onDoubleClick",
  "onPointerDown",
  "onPointerUp",
  "onPointerCancel",
  "onPointerMissed",
  "onLostPointerCapture",
  "onWheel"
];
var Er = (e) => {
  const t = e.scene.value;
  function n(o, f, y, u) {
    if (u || (u = {}), u.args || (u.args = []), o === "template" || zn(o))
      return null;
    let v = o.replace("Tres", ""), h2;
    if (o === "primitive") {
      (!H(u.object) || isRef(u.object)) && Xe(
        "Tres primitives need an 'object' prop, whose value is an object or shallowRef<object>"
      ), v = u.object.type;
      const g = {};
      h2 = Cr(
        u.object,
        {
          object: (_) => _,
          isPrimitive: () => true,
          __tres: () => g
        },
        {
          object: (_, P, C, T) => {
            sr(_, C, T, { patchProp: l, remove: s, insert: r }, e);
          },
          __tres: (_) => {
            Object.assign(g, _);
          }
        }
      );
    } else {
      const g = Ce.value[v];
      g || Xe(
        `${v} is not defined on the THREE namespace. Use extend to add it to the catalog.`
      ), h2 = new g(...u.args);
    }
    return h2 ? (h2.isCamera && (u != null && u.position || h2.position.set(3, 3, 3), u != null && u.lookAt || h2.lookAt(0, 0, 0)), h2 = z(h2, {
      ...h2.__tres,
      type: v,
      memoizedProps: u,
      eventCount: 0,
      primitive: o === "primitive",
      attach: u.attach
    }, e), h2) : null;
  }
  function r(o, f) {
    var v, h2, g;
    if (!o)
      return;
    f = f || t;
    const y = o.__tres ? o : z(o, {}, e), u = f.__tres ? f : z(f, {}, e);
    o = Q(y), f = Q(u), o.__tres && ((v = o.__tres) == null ? void 0 : v.eventCount) > 0 && ((h2 = e.eventManager) == null || h2.registerObject(o)), e.registerCamera(o), (g = e.eventManager) == null || g.registerPointerMissedObject(o), y.__tres.attach ? nr(u, y, y.__tres.attach) : N(o) && N(u) && (u.add(o), o.dispatchEvent({ type: "added" })), y.__tres.parent = u, u.__tres.objects && !u.__tres.objects.includes(y) && u.__tres.objects.push(y);
  }
  function s(o, f) {
    var h2, g, d, _;
    if (!o)
      return;
    o != null && o.__tres && ((h2 = o.__tres) == null ? void 0 : h2.eventCount) > 0 && ((g = e.eventManager) == null || g.deregisterObject(o)), f = Me(f) ? "default" : f;
    const y = (d = o.__tres) == null ? void 0 : d.dispose;
    Me(y) || (y === null ? f = false : f = y);
    const u = (_ = o.__tres) == null ? void 0 : _.primitive, v = f === "default" ? !u : !!f;
    if (o.__tres && "objects" in o.__tres && [...o.__tres.objects].forEach((P) => s(P, f)), v && o.children && [...o.children].forEach((P) => s(P, f)), gt(o, e), vt(o, e), v && !Fn(o)) {
      if (G(f))
        f(o);
      else if (G(o.dispose))
        try {
          o.dispose();
        } catch {
        }
    }
    "__tres" in o && delete o.__tres;
  }
  function l(o, f, y, u) {
    var P, C;
    if (!o)
      return;
    let v = o, h2 = f;
    if (o.__tres && (o.__tres.memoizedProps[f] = u), f === "attach") {
      const T = ((P = o.__tres) == null ? void 0 : P.parent) || o.parent;
      s(o), z(o, { attach: u }, e), T && r(o, T);
      return;
    }
    if (f === "dispose") {
      o.__tres || (o = z(o, {}, e)), o.__tres.dispose = u;
      return;
    }
    if (N(o) && h2 === "blocks-pointer-events") {
      u || u === "" ? o[h2] = u : delete o[h2];
      return;
    }
    Ze.includes(f) && o.__tres && (o.__tres.eventCount += 1);
    let g = oe(h2), d = v == null ? void 0 : v[g];
    if (h2 === "args") {
      const T = o, b = y ?? [], E = u ?? [], M = ((C = o.__tres) == null ? void 0 : C.type) || o.type;
      M && b.length && !Kn(b, E) && (v = Object.assign(
        T,
        new Ce.value[M](...u)
      ));
      return;
    }
    if (v.type === "BufferGeometry") {
      if (h2 === "args")
        return;
      v.setAttribute(
        oe(h2),
        new BufferAttribute(...u)
      );
      return;
    }
    if (h2.includes("-") && d === void 0) {
      const T = h2.split("-");
      d = T.reduce((b, E) => b[oe(E)], v), h2 = T.pop(), g = h2, d != null && d.set || (v = T.reduce((b, E) => b[oe(E)], v));
    }
    let _ = u;
    if (_ === "" && (_ = true), G(d)) {
      Ze.includes(f) || (de(_) ? o[g](..._) : o[g](_)), g.startsWith("on") && G(_) && (v[g] = _);
      return;
    }
    !(d != null && d.set) && !G(d) ? v[g] = _ : d.constructor === _.constructor && (d != null && d.copy) ? d == null || d.copy(_) : de(_) ? d.set(..._) : !d.isColor && d.setScalar ? d.setScalar(_) : d.set(_), ht(o);
  }
  function i(o) {
    var f;
    return ((f = o == null ? void 0 : o.__tres) == null ? void 0 : f.parent) || null;
  }
  function a(o) {
    const f = z(new Object3D(), { type: "Comment" }, e);
    return f.name = o, f;
  }
  function c(o) {
    var v;
    const f = i(o), y = ((v = f == null ? void 0 : f.__tres) == null ? void 0 : v.objects) || [], u = y.indexOf(o);
    return u < 0 || u >= y.length - 1 ? null : y[u + 1];
  }
  return {
    insert: r,
    remove: s,
    createElement: n,
    patchProp: l,
    parentNode: i,
    createText: () => void 0,
    createComment: a,
    setText: () => void 0,
    setElementText: () => void 0,
    nextSibling: c,
    querySelector: () => void 0,
    setScopeId: () => void 0,
    cloneNode: () => void 0,
    insertStaticContent: () => void 0
  };
};
function Tr() {
  return bt().__VUE_DEVTOOLS_GLOBAL_HOOK__;
}
function bt() {
  return typeof navigator < "u" && typeof window < "u" ? window : typeof globalThis < "u" ? globalThis : {};
}
var Sr = typeof Proxy == "function";
var xr = "devtools-plugin:setup";
var Ar = "plugin:settings:set";
var q;
var Te;
function kr() {
  var e;
  return q !== void 0 || (typeof window < "u" && window.performance ? (q = true, Te = window.performance) : typeof globalThis < "u" && (!((e = globalThis.perf_hooks) === null || e === void 0) && e.performance) ? (q = true, Te = globalThis.perf_hooks.performance) : q = false), q;
}
function Lr() {
  return kr() ? Te.now() : Date.now();
}
var Rr = class {
  constructor(t, n) {
    this.target = null, this.targetQueue = [], this.onQueue = [], this.plugin = t, this.hook = n;
    const r = {};
    if (t.settings)
      for (const i in t.settings) {
        const a = t.settings[i];
        r[i] = a.defaultValue;
      }
    const s = `__vue-devtools-plugin-settings__${t.id}`;
    let l = Object.assign({}, r);
    try {
      const i = localStorage.getItem(s), a = JSON.parse(i);
      Object.assign(l, a);
    } catch {
    }
    this.fallbacks = {
      getSettings() {
        return l;
      },
      setSettings(i) {
        try {
          localStorage.setItem(s, JSON.stringify(i));
        } catch {
        }
        l = i;
      },
      now() {
        return Lr();
      }
    }, n && n.on(Ar, (i, a) => {
      i === this.plugin.id && this.fallbacks.setSettings(a);
    }), this.proxiedOn = new Proxy({}, {
      get: (i, a) => this.target ? this.target.on[a] : (...c) => {
        this.onQueue.push({
          method: a,
          args: c
        });
      }
    }), this.proxiedTarget = new Proxy({}, {
      get: (i, a) => this.target ? this.target[a] : a === "on" ? this.proxiedOn : Object.keys(this.fallbacks).includes(a) ? (...c) => (this.targetQueue.push({
        method: a,
        args: c,
        resolve: () => {
        }
      }), this.fallbacks[a](...c)) : (...c) => new Promise((o) => {
        this.targetQueue.push({
          method: a,
          args: c,
          resolve: o
        });
      })
    });
  }
  async setRealTarget(t) {
    this.target = t;
    for (const n of this.onQueue)
      this.target.on[n.method](...n.args);
    for (const n of this.targetQueue)
      n.resolve(await this.target[n.method](...n.args));
  }
};
function Or(e, t) {
  const n = e, r = bt(), s = Tr(), l = Sr && n.enableEarlyProxy;
  if (s && (r.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !l))
    s.emit(xr, e, t);
  else {
    const i = l ? new Rr(n, s) : null;
    (r.__VUE_DEVTOOLS_PLUGINS__ = r.__VUE_DEVTOOLS_PLUGINS__ || []).push({
      pluginDescriptor: n,
      setupFn: t,
      proxy: i
    }), i && t(i.proxiedTarget);
  }
}
function Dr(e, t) {
  const n = `▲ ■ ●${e}`;
  typeof et == "function" ? et(n, t) : console.log(n);
}
function et(e, t) {
  throw new Error(e + t);
}
var Mt = (e) => {
  const t = {
    id: e.uuid,
    label: e.type,
    children: [],
    tags: []
  };
  e.name !== "" && t.tags.push({
    label: e.name,
    textColor: 5750629,
    backgroundColor: 15793395
  });
  const n = ke(e);
  return n > 0 && t.tags.push({
    label: `${pr(n)} KB`,
    textColor: 15707189,
    backgroundColor: 16775644,
    tooltip: "Memory usage"
  }), e.type.includes("Light") && (Hn(e) && t.tags.push({
    label: `${e.intensity}`,
    textColor: 9738662,
    backgroundColor: 16316922,
    tooltip: "Intensity"
  }), t.tags.push({
    label: `#${new Color(e.color).getHexString()}`,
    textColor: 9738662,
    backgroundColor: 16316922,
    tooltip: "Color"
  })), e.type.includes("Camera") && (t.tags.push({
    label: `${e.fov}°`,
    textColor: 9738662,
    backgroundColor: 16316922,
    tooltip: "Field of view"
  }), t.tags.push({
    label: `x: ${Math.round(e.position.x)} y: ${Math.round(e.position.y)} z: ${Math.round(e.position.z)}`,
    textColor: 9738662,
    backgroundColor: 16316922,
    tooltip: "Position"
  })), t;
};
function Pt(e, t, n = "") {
  e.children.forEach((r) => {
    if (r.type === "HightlightMesh" || n && !r.type.includes(n) && !r.name.includes(n))
      return;
    const s = Mt(r);
    t.children.push(s), Pt(r, s, n);
  });
}
var jr = [];
var X = "tres:inspector";
var Br = reactive({
  sceneGraph: null
});
function Ir(e, t) {
  Or(
    {
      id: "dev.esm.tres",
      label: "TresJS 🪐",
      logo: "https://raw.githubusercontent.com/Tresjs/tres/main/public/favicon.svg",
      packageName: "tresjs",
      homepage: "https://tresjs.org",
      componentStateTypes: jr,
      app: e
    },
    (n) => {
      typeof n.now != "function" && Dr(
        "You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html."
      ), n.addInspector({
        id: X,
        label: "TresJS 🪐",
        icon: "account_tree",
        treeFilterPlaceholder: "Search instances"
      }), setInterval(() => {
        n.sendInspectorTree(X);
      }, 1e3), setInterval(() => {
        n.notifyComponentUpdate();
      }, 5e3), n.on.getInspectorTree((l) => {
        if (l.inspectorId === X) {
          const i = Mt(t.scene.value);
          Pt(t.scene.value, i, l.filter), Br.sceneGraph = i, l.rootNodes = [i];
        }
      });
      let r = null, s = null;
      n.on.getInspectorState((l) => {
        var i;
        if (l.inspectorId === X) {
          const [a] = t.scene.value.getObjectsByProperty("uuid", l.nodeId);
          if (!a)
            return;
          if (s && r && r.parent && s.remove(r), a.isMesh) {
            const c = Xn(a);
            a.add(c), r = c, s = a;
          }
          l.state = {
            object: Object.entries(a).map(([c, o]) => c === "children" ? { key: c, value: o.filter((f) => f.type !== "HightlightMesh") } : { key: c, value: o, editable: true }).filter(({ key: c }) => c !== "parent")
          }, a.isScene && (l.state.info = {
            objects: a.children.length,
            memory: ke(a),
            calls: t.renderer.value.info.render.calls,
            triangles: t.renderer.value.info.render.triangles,
            points: t.renderer.value.info.render.points,
            lines: t.renderer.value.info.render.lines
          }, l.state.programs = ((i = t.renderer.value.info.programs) == null ? void 0 : i.map((c) => ({
            key: c.name,
            value: {
              ...c,
              vertexShader: c.vertexShader,
              attributes: c.getAttributes(),
              uniforms: c.getUniforms()
            }
          }))) || []);
        }
      }), n.on.editInspectorState((l) => {
        l.inspectorId === X && Qn(t.scene.value, l.nodeId, l.path, l.state.value);
      });
    }
  );
}
var $r = ["data-scene", "data-tres"];
var Hr = defineComponent({
  __name: "TresCanvas",
  props: {
    shadows: { type: Boolean, default: void 0 },
    clearColor: {},
    toneMapping: {},
    shadowMapType: {},
    useLegacyLights: { type: Boolean, default: void 0 },
    outputColorSpace: {},
    toneMappingExposure: {},
    renderMode: { default: "always" },
    dpr: {},
    camera: {},
    preset: {},
    windowSize: { type: Boolean, default: void 0 },
    enableProvideBridge: { type: Boolean, default: true },
    context: {},
    alpha: { type: Boolean, default: void 0 },
    premultipliedAlpha: { type: Boolean },
    antialias: { type: Boolean, default: void 0 },
    stencil: { type: Boolean, default: void 0 },
    preserveDrawingBuffer: { type: Boolean, default: void 0 },
    powerPreference: {},
    depth: { type: Boolean, default: void 0 },
    failIfMajorPerformanceCaveat: { type: Boolean, default: void 0 },
    precision: {},
    logarithmicDepthBuffer: { type: Boolean, default: void 0 },
    reverseDepthBuffer: { type: Boolean }
  },
  emits: [
    "render",
    "click",
    "double-click",
    "context-menu",
    "pointer-move",
    "pointer-up",
    "pointer-down",
    "pointer-enter",
    "pointer-leave",
    "pointer-over",
    "pointer-out",
    "pointer-missed",
    "wheel",
    "ready"
  ],
  setup(e, { expose: t, emit: n }) {
    const r = e, s = n, l = useSlots(), { logWarning: i } = V(), a = ref(), c = shallowRef(new Scene()), o = getCurrentInstance();
    Ee(three_module_exports);
    const f = (g, d = false) => defineComponent({
      setup() {
        var T;
        const _ = (T = getCurrentInstance()) == null ? void 0 : T.appContext;
        _ && (_.app = o == null ? void 0 : o.appContext.app);
        const P = {};
        function C(b) {
          b && (b.parent && C(b.parent), b.provides && Object.assign(P, b.provides));
        }
        return o != null && o.parent && r.enableProvideBridge && (C(o.parent), Reflect.ownKeys(P).forEach((b) => {
          provide(b, P[b]);
        })), provide("useTres", g), provide("extend", Ee), typeof window < "u" && Ir(_ == null ? void 0 : _.app, g), () => h(Fragment, null, d ? [] : l.default());
      }
    }), y = (g, d = false) => {
      const _ = f(g, d), { render: P } = createRenderer(Er(g));
      P(h(_), c.value);
    }, u = (g, d = false) => {
      mt(g.scene.value), d && (g.renderer.value.dispose(), g.renderer.value.renderLists.dispose(), g.renderer.value.forceContextLoss()), c.value.__tres = {
        root: g
      };
    }, v = shallowRef(null);
    t({ context: v, dispose: () => u(v.value, true) });
    const h2 = () => {
      u(v.value), y(v.value, true);
    };
    return onMounted(() => {
      const g = a;
      v.value = br({
        scene: c.value,
        canvas: g,
        windowSize: r.windowSize ?? false,
        rendererOptions: r,
        emit: s
      });
      const { registerCamera: d, camera: _, cameras: P, deregisterCamera: C } = v.value;
      y(v.value);
      const T = () => {
        const b = new PerspectiveCamera(
          45,
          window.innerWidth / window.innerHeight,
          0.1,
          1e3
        );
        b.position.set(3, 3, 3), b.lookAt(0, 0, 0), d(b);
        const E = watchEffect(() => {
          P.value.length >= 2 && (b.removeFromParent(), C(b), E == null || E());
        });
      };
      watch(
        () => r.camera,
        (b, E) => {
          b && d(b), E && (E.removeFromParent(), C(E));
        },
        {
          immediate: true
        }
      ), _.value || (i(
        "No camera found. Creating a default perspective camera. To have full control over a camera, please add one to the scene."
      ), T());
    }), onUnmounted(h2), (g, d) => (openBlock(), createElementBlock("canvas", {
      ref_key: "canvas",
      ref: a,
      "data-scene": c.value.uuid,
      class: normalizeClass(g.$attrs.class),
      "data-tres": `tresjs ${unref(Rn).version}`,
      style: normalizeStyle({
        display: "block",
        width: "100%",
        height: "100%",
        position: g.windowSize ? "fixed" : "relative",
        top: 0,
        left: 0,
        pointerEvents: "auto",
        touchAction: "none",
        ...g.$attrs.style
      })
    }, null, 14, $r));
  }
});
var Ur = [
  "TresCanvas",
  "TresLeches",
  "TresScene"
];
var no = {
  template: {
    compilerOptions: {
      isCustomElement: (e) => e.startsWith("Tres") && !Ur.includes(e) || e === "primitive"
    }
  }
};
var { logWarning: Fr } = V();
var B = null;
var ro = {
  updated: (e, t) => {
    var s;
    const n = Zn(t);
    if (!n) {
      Fr(`v-distance-to: problem with binding value: ${t.value}`);
      return;
    }
    B && (B.dispose(), e.parent.remove(B));
    const r = n.clone().sub(e.position);
    r.normalize(), B = new ArrowHelper(r, e.position, e.position.distanceTo(n), 16776960), e.parent.add(B), console.table(
      [
        ["Distance:", e.position.distanceTo(n)],
        [`origin: ${e.name || e.type}`, `x:${e.position.x}, y:${e.position.y}, z:${(s = e.position) == null ? void 0 : s.z}`],
        [`Destiny: ${e.name || e.type}`, `x:${n.x}, y:${n.y}, z:${n == null ? void 0 : n.z}`]
      ]
    );
  },
  unmounted: (e) => {
    B == null || B.dispose(), e.parent.remove(B);
  }
};
var Ct = class extends Line {
  constructor(t, n) {
    const r = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0], s = new BufferGeometry();
    s.setAttribute("position", new Float32BufferAttribute(r, 3)), s.computeBoundingSphere();
    const l = new LineBasicMaterial({ fog: false });
    super(s, l), this.light = t, this.color = n, this.type = "RectAreaLightHelper";
    const i = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0], a = new BufferGeometry();
    a.setAttribute("position", new Float32BufferAttribute(i, 3)), a.computeBoundingSphere(), this.add(new Mesh(a, new MeshBasicMaterial({ side: BackSide, fog: false })));
  }
  updateMatrixWorld() {
    if (this.scale.set(0.5 * this.light.width, 0.5 * this.light.height, 1), this.color !== void 0)
      this.material.color.set(this.color), this.children[0].material.color.set(this.color);
    else {
      this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
      const t = this.material.color, n = Math.max(t.r, t.g, t.b);
      n > 1 && t.multiplyScalar(1 / n), this.children[0].material.color.copy(this.material.color);
    }
    this.matrixWorld.extractRotation(this.light.matrixWorld).scale(this.scale).copyPosition(this.light.matrixWorld), this.children[0].matrixWorld.copy(this.matrixWorld);
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose(), this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
};
var { logWarning: tt } = V();
var ie;
var F;
var Wr = {
  DirectionalLight: DirectionalLightHelper,
  PointLight: PointLightHelper,
  SpotLight: SpotLightHelper,
  HemisphereLight: HemisphereLightHelper,
  RectAreaLight: Ct
};
var oo = {
  mounted: (e) => {
    if (!e.isLight) {
      tt(`${e.type} is not a light`);
      return;
    }
    ie = Wr[e.type], e.parent.add(new ie(e, 1, e.color.getHex()));
  },
  updated: (e) => {
    F = e.parent.children.find((t) => t instanceof ie), !(F instanceof Ct) && F.update();
  },
  unmounted: (e) => {
    if (!e.isLight) {
      tt(`${e.type} is not a light`);
      return;
    }
    F = e.parent.children.find((t) => t instanceof ie), F && F.dispose && F.dispose(), e.parent.remove(F);
  }
};
var so = {
  mounted: (e, t) => {
    if (t.arg) {
      console.log(`v-log:${t.arg}`, e[t.arg]);
      return;
    }
    console.log("v-log", e);
  }
};
var io = {
  install(e) {
    e.component("TresCanvas", Hr);
  }
};
export {
  Hr as TresCanvas,
  Yr as UseLoader,
  qr as UseTexture,
  Ce as catalogue,
  dr as createRenderLoop,
  io as default,
  mt as dispose,
  Ee as extend,
  Kr as isProd,
  hr as normalizeColor,
  Jr as normalizeVectorFlexibleParam,
  Qr as onTresReady,
  no as templateCompilerOptions,
  On as trasverseObjects,
  ar as useCamera,
  Dn as useLoader,
  V as useLogger,
  Zr as useLoop,
  yr as useRaycaster,
  eo as useRenderLoop,
  gr as useRenderer,
  to as useSeek,
  ir as useTexture,
  Xr as useTres,
  me as useTresContext,
  br as useTresContextProvider,
  _r as useTresEventManager,
  ro as vDistanceTo,
  oo as vLightHelper,
  so as vLog
};
//# sourceMappingURL=@tresjs_core.js.map
